{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter application name : app2\n",
      "<class 'str'>\n",
      "Connection established\n",
      "Connection established\n",
      "Snowflake Version: 4.35.2\n",
      "Starting 0: \n",
      "            COPY INTO TEMP\n",
      "            FROM @CSV_STAGE/app2\n",
      "            PATTERN = '.*.csv'\n",
      "            FILE_FORMAT = (FORMAT_NAME = csvdoubleqslash)\n",
      "            ;\n",
      "            \n",
      "Starting 1: \n",
      "            COPY INTO TEMP\n",
      "            FROM @CSV_STAGE/app4\n",
      "            PATTERN = '.*.csv'\n",
      "            FILE_FORMAT = (FORMAT_NAME = csvsingleqslash)\n",
      "            ;\n",
      "            \n",
      "All threads started\n",
      "Exiting 0: \n",
      "            COPY INTO TEMP\n",
      "            FROM @CSV_STAGE/app2\n",
      "            PATTERN = '.*.csv'\n",
      "            FILE_FORMAT = (FORMAT_NAME = csvdoubleqslash)\n",
      "            ;\n",
      "            \n",
      "Exiting 1: \n",
      "            COPY INTO TEMP\n",
      "            FROM @CSV_STAGE/app4\n",
      "            PATTERN = '.*.csv'\n",
      "            FILE_FORMAT = (FORMAT_NAME = csvsingleqslash)\n",
      "            ;\n",
      "            \n"
     ]
    }
   ],
   "source": [
    "###################################\n",
    "# Version : 2.2\n",
    "# Changes made: used config file for table details\n",
    "# metatable does not contain whole file path\n",
    "\n",
    "\n",
    "\n",
    "import snowflake.connector\n",
    "import threading\n",
    "import pandas as pd\n",
    "from configparser import ConfigParser\n",
    "\n",
    "def sfConnect (\n",
    "    sfPswd = '',\n",
    "    sfUser = '',\n",
    "    sfAccount = ''\n",
    ") :\n",
    "    # ### This script creates a function that establishes a connection to a Snowflake instance\n",
    "    sfConnection = snowflake.connector.connect(\n",
    "    user=sfUser,\n",
    "    password=sfPswd,\n",
    "    account=sfAccount\n",
    "    )\n",
    "    cs = sfConnection.cursor()\n",
    "    try:\n",
    "        tru = 'select'\n",
    "        results = cs.execute(tru + ' current_version()').fetchone()\n",
    "    except:\n",
    "        print('Connection failed, check credentials')\n",
    "        return\n",
    "    finally:\n",
    "        print('Connection established')\n",
    "        print(\"Snowflake Version: \" + results[0])\n",
    "        cs.close()\n",
    "    return sfConnection\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "class sfExecutionThread (threading.Thread):\n",
    "    def __init__(self, threadID, sqlQuery):\n",
    "        threading.Thread.__init__(self)\n",
    "        self.threadID = threadID\n",
    "        self.sqlQuery = sqlQuery\n",
    "    def run(self):\n",
    "        print('Starting {0}: {1}'.format(self.threadID, self.sqlQuery))\n",
    "        sfExecuteInSnowflake(self.sqlQuery)\n",
    "        print('Exiting {0}: {1}'.format(self.threadID, self.sqlQuery))\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "# Define the function that will be executed within each thread\n",
    "def sfExecuteInSnowflake (\n",
    "    sfQuery,\n",
    "    sfRole = 'SYSADMIN',\n",
    "    sfWarehouse = 'MULTI_THREADING_TEST') :\n",
    "    sfConnection.cursor().execute(sfQuery)\n",
    "\n",
    "    \n",
    "    \n",
    "# Define the list of variables which determine the data that will be loaded\n",
    "def gettabledetails (\n",
    "    sfPswd = '',\n",
    "    sfUser = '',\n",
    "    sfAccount = ''\n",
    ") :\n",
    "    # ### This script creates a function that establishes a connection to a Snowflake instance\n",
    "    sfConnection = snowflake.connector.connect(\n",
    "    user=sfUser,\n",
    "    password=sfPswd,\n",
    "    account=sfAccount\n",
    "    )\n",
    "    cs = sfConnection.cursor()\n",
    "    try:\n",
    "        results = cs.execute('select * from \"OUR_FIRST_DATABASE\".\"PUBLIC\".\"MET_TABLE\"').fetchall()\n",
    "        print('Connection established')\n",
    "        result = pd.DataFrame(results)\n",
    "        #print (result)\n",
    "        return result\n",
    "    except:\n",
    "        print('Connection failed, check credentials')\n",
    "        return 0\n",
    "    finally:\n",
    "        cs.close()\n",
    "        sfConnection.close()\n",
    "\n",
    "        \n",
    "\n",
    "application = input('Enter application name : ')\n",
    "configur = ConfigParser()\n",
    "configur.read('/home/batman/files/Webster/multithreading_conf.txt')\n",
    "use_database = configur.get('app1','Database')\n",
    "use_schema = configur.get('app1','Schema')\n",
    "print(type(use_database))\n",
    "details_table = gettabledetails(sfPswd = 'Minipandu@0',sfUser = 'anirudhtcs',sfAccount = 'sx69711.ap-south-1.aws')\n",
    "details_table.columns = ['File_Name','SF_Table','File_Format','Application_Name',\n",
    "                         'Application_ID','Active_Flag']\n",
    "if application in details_table['Application_Name'].values:\n",
    "    details_table_app_filtered = details_table[details_table['Application_Name']==application]\n",
    "    #print(details_table_app_filtered)\n",
    "    #split_details = details_table_app_filtered[\"File_Name\"].str.split(\"/\",n=1,expand =True)\n",
    "    #split_dbschma = split_details[0].str.split(\".\", n=2, expand=True)\n",
    "    \n",
    "# Define an empty list to populate with COPY INTO statements\n",
    "    copyIntoStatements = []\n",
    "# Loop through the members of variablesList and construct the COPY INTO statements\n",
    "# Use .format() to replace the {0} and {1} with variables destinationTable and sourceLocation\n",
    "    #sfC = sfConnect(sfPswd = 'Minipandu@0',sfUser = 'anirudhtcs',sfAccount = 'sx69711.ap-south-1.aws')\n",
    "    for member in details_table_app_filtered.index:\n",
    "        #sfC.cursor().execute(\"USE DATABASE \"+split_dbschma[0])\n",
    "        #sfC.cursor().execute(\"USE SCHEMA \"+split_dbschma[1])\n",
    "        reverse_file_name = details_table['File_Name'][member][::-1]\n",
    "#reverse_file_name\n",
    "        #print(reverse_file_name)\n",
    "        split_details =reverse_file_name.split(\"/\",1)\n",
    "        split_details[0] = split_details[0][::-1]\n",
    "        split_details[1] = split_details[1][::-1]\n",
    "        if details_table_app_filtered['Active_Flag'][member]=='Y':\n",
    "            copyIntoStatements.append(\n",
    "            '''\n",
    "            COPY INTO {0}\n",
    "            FROM @{1}\n",
    "            PATTERN = '{2}'\n",
    "            FILE_FORMAT = (FORMAT_NAME = {3})\n",
    "            ;\n",
    "            '''.format(details_table_app_filtered['SF_Table'][member],\n",
    "                       split_details[1],\n",
    "                       split_details[0],\n",
    "                       details_table_app_filtered['File_Format'][member]))\n",
    "    \n",
    "\n",
    "# Create the empty list of threads\n",
    "    threads = []\n",
    "# Define a counter which will be used as the threadID\n",
    "    counter = 0\n",
    "# Loop through each statement in the copyIntoStatements list,\n",
    "# adding the sfExecutionThread thread to the list of threads\n",
    "# and incrementing the counter by 1 each time.\n",
    "\n",
    "#########################\n",
    "    # Establish connection\n",
    "    ## Make sure you insert the right login credentials below.\n",
    "    sfConnection = sfConnect(sfPswd = 'Minipandu@0',sfUser = 'anirudhtcs',sfAccount = 'sx69711.ap-south-1.aws')\n",
    "    # Use role defined in function input\n",
    "    sfConnection.cursor().execute('USE ROLE SYSADMIN')\n",
    "    sfConnection.cursor().execute('USE DATABASE '+ use_database)\n",
    "    sfConnection.cursor().execute('USE SCHEMA '+ use_schema)\n",
    "    # Use warehouse defined in function input\n",
    "    sfConnection.cursor().execute('USE WAREHOUSE MULTI_THREADING_TEST')\n",
    "    # Increase the session timeout if desiredabs\n",
    "    sfConnection.cursor().execute('ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 12000')\n",
    "    # Execute the query sfQuery in Snowflake\n",
    "#####################################\n",
    "    for statement in copyIntoStatements:\n",
    "        threads.append(sfExecutionThread(counter, statement))\n",
    "        counter += 1\n",
    "# Execute the threads\n",
    "    for thread in threads:\n",
    "        thread.start()\n",
    "    print('All threads started')\n",
    "else:\n",
    "    print('invalid Application name')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connection established\n",
      "vsc.*./1ppa/EGATS_VSC\n",
      "['.*.csv', 'CSV_STAGE/app1']\n"
     ]
    }
   ],
   "source": [
    "import snowflake.connector\n",
    "import threading\n",
    "import pandas as pd\n",
    "def gettabledetails (\n",
    "    sfPswd = '',\n",
    "    sfUser = '',\n",
    "    sfAccount = ''\n",
    ") :\n",
    "    # ### This script creates a function that establishes a connection to a Snowflake instance\n",
    "    sfConnection = snowflake.connector.connect(\n",
    "    user=sfUser,\n",
    "    password=sfPswd,\n",
    "    account=sfAccount\n",
    "    )\n",
    "    cs = sfConnection.cursor()\n",
    "    try:\n",
    "        query ='* from \"OUR_FIRST_DATABASE\".\"PUBLIC\".\"MET_TABLE\"'\n",
    "        results = cs.execute(\"select \"+query).fetchall()\n",
    "        print('Connection established')\n",
    "        result = pd.DataFrame(results)\n",
    "        result.set_index(1)\n",
    "        #print (result)\n",
    "        return result\n",
    "    except:\n",
    "        print('Connection failed, check credentials')\n",
    "        return 0\n",
    "    finally:\n",
    "        cs.close()\n",
    "        sfConnection.close()\n",
    "details = gettabledetails(sfPswd = 'Minipandu@0',sfUser = 'anirudhtcs',sfAccount = 'sx69711.ap-south-1')\n",
    "details.columns = ['File_Name','SF_Table','File_Format','Application_Name',\n",
    "                         'Application_ID','Active_Flag']\n",
    "#details.set_index('File_Name', inplace =True)\n",
    "#print(type(details))\n",
    "reverse_file_name = details['File_Name'].to_string()[:4:-1]\n",
    "#reverse_file_name\n",
    "print(reverse_file_name)\n",
    "split_details =reverse_file_name.split(\"/\",1)\n",
    "split_details[0] = split_details[0][::-1]\n",
    "split_details[1] = split_details[1][::-1]\n",
    "#split_details =details[\"File_Name\"].str.split(\"/\",n=1,expand =True)\n",
    "print(split_details)\n",
    "#split_details\n",
    "#split_dbschma = split_details[0].str.split(\".\", n=2, expand=True)\n",
    "#split_details"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OUR_FIRST_DATABASE\n"
     ]
    }
   ],
   "source": [
    "from configparser import ConfigParser\n",
    "configur = ConfigParser()\n",
    "configur.read('/home/batman/files/Webster/multithreading_conf.txt')\n",
    "app1 = configur.get('app1','Database')\n",
    "print(app1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
